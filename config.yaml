# engram3/config.yaml
# Configuration file for keyboard layout preference learning system
#
# Core components:
# - data: Dataset and layout configuration
# - features: Feature selection and interaction settings
# - model: Bayesian model parameters and MCMC settings
# - recommendations: Bigram pair recommendation parameters
# - visualization: Plot configuration
# - logging: System logging settings
#
# The system supports three operational modes:
# 1. Feature selection: Identifies optimal feature set
# 2. Model training: Trains preference model
# 3. Recommendations: Generates bigram pairs for data collection
#
# Each section includes detailed parameter documentation and
# typical values/ranges where appropriate.

#-----------------------------------------------------------------------
# Input data and key layout
#-----------------------------------------------------------------------
data:                                   # Path to processed preference data
  input_file: "data/input/processed_bigram_data_406participants_0inconsistencies.csv"
  splits:
    test_ratio: 0.2                     # Proportion of data used for testing (0.2 = 20%)
    random_seed: 26                     # Seed for reproducible train/test splits
    split_data_file: "data/split_train_test_indices.npz"  # File to store train/test indices
  layout:
    chars: [q, w, e, r, t,              # Characters in keyboard layout (half-QWERTY)
            a, s, d, f, g,              # (only left-hand side used for symmetric analysis)
            z, x, c, v, b]

#-----------------------------------------------------------------------
# Feature selection
#-----------------------------------------------------------------------
# Select from among features not excluded in the feature analysis mode 
# (see "Excluded features" below; base features required for included interactions are retained).
# In the round-robin feature selection process, we're making relative comparisons between features to select 
# the best one at each round. Therefore high precision MCMC settings (chains, warmup, n_samples) are less critical:
# - We only need enough precision to reliably determine which feature is better
# - We're not using the absolute values for final inference
# - The relative ranking is more important than precise effect estimates
feature_selection:
  importance_threshold: 0.000039        # Threshold for aligned effect importance
  cross_validation:
    n_splits: 5                         # Number of CV folds for evaluating importance
    min_fold_size: 100                  # Minimum number of preferences per fold
  metrics_file: "output/data/feature_metrics.csv"   # File to store feature metrics
  model_file: "output/data/feature_selection_model.pkl"  # File to store feature selection model

features:                               # features to analyze and select from (55 total)
  base_features:                        # Core features for analysis
    # individual features (5)
    - same_finger                       # Whether bigram uses same finger
    - sum_finger_values                 # Combined finger load values
    - adj_finger_diff_row               # Adjacent fingers in different rows
    - rows_apart                        # Number of rows between keys
    - angle_apart                       # Angular distance between keys
    - sum_engram_position_values        # Combined Engram position values
    - sum_row_position_values           # Combined row position values
  interactions:
    # 2-way (13)
    - [adj_finger_diff_row, angle_apart]
    - [adj_finger_diff_row, rows_apart]
    - [adj_finger_diff_row, sum_engram_position_values]
    - [adj_finger_diff_row, sum_row_position_values]
    - [angle_apart, sum_engram_position_values]
    - [angle_apart, sum_finger_values] 
    - [rows_apart, same_finger]
    - [rows_apart, sum_engram_position_values]
    - [rows_apart, sum_row_position_values]
    - [same_finger, sum_finger_values]
    - [same_finger, sum_row_position_values]
    - [sum_engram_position_values, sum_finger_values]
    - [sum_finger_values, sum_row_position_values]
    # 3-way (10)
    - [adj_finger_diff_row, angle_apart, sum_engram_position_values]
    - [adj_finger_diff_row, angle_apart, sum_finger_values]
    - [adj_finger_diff_row, rows_apart, sum_engram_position_values]
    - [adj_finger_diff_row, rows_apart, sum_row_position_values]
    - [adj_finger_diff_row, sum_engram_position_values, sum_finger_values]
    - [angle_apart, sum_engram_position_values, sum_finger_values]
    - [rows_apart, same_finger, sum_finger_values]
    - [rows_apart, same_finger, sum_row_position_values]
    - [rows_apart, sum_engram_position_values, sum_finger_values]
    - [same_finger, sum_finger_values, sum_row_position_values]
  control_features:                       # Features to control for but not analyze
    - bigram_frequency                    # Bigram frequency in the English language

#-----------------------------------------------------------------------
# Bigram pair recommendations
#-----------------------------------------------------------------------
recommendations:
    n_recommendations: 50                # Number of bigram pairs to recommend (limited by the proposed data collection population size)
    max_candidates: 5000                 # Maximum number of candidate pairs to evaluate
    weights:                             # Scoring weights (must sum to 1.0)
        information_gain: 0.618          # φ ≈ 0.618: Weight for model uncertainty reduction potential (the golden ratio provides a natural balance between two competing objectives)
        coverage_value: 0.382            # 1 - φ: Weight for feature space coverage improvement
    min_comfort_score: 0.333             # 1/3: Minimum predicted comfort score to consider pair (below 1/3, pairs are likely genuinely uncomfortable)
    min_feature_coverage: 0.168          # 1/e - 0.2: Minimum feature space novelty, set to the lowered secretary threshold (1/e (≈ 0.368) is an optimal stopping threshold; subtracting 0.2 allows more exploration)
    min_diversity: 0.632                 # 1 - 1/e: Minimum diversity between recommended pairs, set to the complementary secretary threshold
    recommendations_file: "output/data/recommended_bigram_pairs.csv"    # File to store recommendations

#-----------------------------------------------------------------------
# Model training
#-----------------------------------------------------------------------
# Settings to debug the model
__model_fast: &debug  
  chains: 1                             # Number of parallel MCMC chains for sampling (higher for better convergence diagnostics)
  warmup: 200                           # Number of warmup samples per chain for adaptation to parameter space (discarded) (usually 25-50% of total iterations = chains x n_samples)
  n_samples: 500                        # Number of post-warmup samples per chain (kept) (higher for more precise posterior estimates)
  max_treedepth: 1                      # Maximum depth of NUTS sampling tree (higher = more exhaustive exploration; leapfrog steps = 2^max_treedepth)
  adapt_delta: 0.80                     # Target acceptance rate (higher = more careful sampling, fewer divergent transitions)

# Settings to analyze features
__model_analysis: &feature_analysis
  chains: 2                            # Number of parallel MCMC chains for sampling (higher for better convergence diagnostics)
  warmup: 500                          # Number of warmup samples per chain for adaptation to parameter space (discarded) (usually 25-50% of total iterations = chains x n_samples)
  n_samples: 750                       # Number of post-warmup samples per chain (kept) (higher for more precise posterior estimates)
  max_treedepth: 8                     # Maximum depth of NUTS sampling tree (higher = more exhaustive exploration; leapfrog steps = 2^max_treedepth)
  adapt_delta: 0.85                    # Target acceptance rate (higher = more careful sampling, fewer divergent transitions)

# Settings to select features
__model_selection: &feature_selection
  chains: 2                            # Number of parallel MCMC chains for sampling (higher for better convergence diagnostics)
  warmup: 1000                         # Number of warmup samples per chain for adaptation to parameter space (discarded) (usually 25-50% of total iterations = chains x n_samples)
  n_samples: 3000                      # Number of post-warmup samples per chain (kept) (higher for more precise posterior estimates)
  max_treedepth: 10                    # Maximum depth of NUTS sampling tree (higher = more exhaustive exploration; leapfrog steps = 2^max_treedepth)
  adapt_delta: 0.9                     # Target acceptance rate (higher = more careful sampling, fewer divergent transitions)

# Settings to train the model on the selected features
__model_slow: &model_train
  chains: 4                            # Number of parallel MCMC chains for sampling (higher for better convergence diagnostics)
  warmup: 3000                         # Number of warmup samples per chain for adaptation to parameter space (discarded) (usually 25-50% of total iterations = chains x n_samples)
  n_samples: 7000                      # Number of post-warmup samples per chain (kept) (higher for more precise posterior estimates)
  max_treedepth: 15                    # Maximum depth of NUTS sampling tree (higher = more exhaustive exploration; leapfrog steps = 2^max_treedepth)
  adapt_delta: 0.95                    # Target acceptance rate (higher = more careful sampling, fewer divergent transitions)

model:                                 # Bayesian model parameters (Stan)
  #<<: *debug                          # Model debug settings
  #<<: *feature_analysis               # Model feature analysis settings
  <<: *feature_selection               # Model feature selection settings
  #<<: *model_train                    # Model training settings
  feature_scale: 1.5                   # Scale parameter for feature weight priors (lower for more regularization)
  participant_scale: 0.5               # Scale parameter for participant effect priors (lower to reduce overfitting to individual participants)
  required_temp_mb: 2000               # Required temporary space in MB
  predictions_file: "output/data/estimated_bigram_scores.csv"   # File to store predicted comfort scores
  model_file: "output/data/bigram_score_prediction_model.pkl"   # File to store trained model

#-----------------------------------------------------------------------
# Visualization, logging, and paths
#-----------------------------------------------------------------------
visualization:
  dpi: 300                            # Resolution of saved plots (dots per inch)
  figure_size: [12, 8]                # Default figure dimensions (width, height)
  alpha: 0.6                          # Transparency for plot elements
  color_map: "viridis"                # Default colormap for visualizations (viridis is perceptually uniform)

logging:                              # Logging configuration
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"  # Standard Python logging format
  console_level: "INFO"               # Show INFO and above messages in console
  file_level: "DEBUG"                 # Store DEBUG and above messages in log file

paths:                                # Directory structure for outputs
  root_dir: "output"                  # Base directory for all outputs
  metrics_dir: "output/data"          # Directory for storing computed metrics
  plots_dir: "output/plots"           # Directory for saving visualizations
  logs_dir: "output/logs"             # Directory for log files


#-----------------------------------------------------------------------
# Excluded features: below threshold determined in feature analysis mode
#-----------------------------------------------------------------------
### |
  excluded base_features:
    - typing_time                       # Time taken to type bigram
    - outward_roll                      # Whether movement rolls outward
    - middle_column                     # Keys in middle column (outside home columns)
  excluded interactions:
    - [adj_finger_diff_row, outward_roll]
    - [adj_finger_diff_row, sum_finger_values]
    - [angle_apart, outward_roll]
    - [outward_roll, rows_apart]
    - [outward_roll, sum_engram_position_values]
    - [outward_roll, sum_finger_values]
    - [outward_roll, sum_row_position_values]
    - [rows_apart, sum_finger_values]
    - [adj_finger_diff_row, angle_apart, outward_roll]
    - [adj_finger_diff_row, outward_roll, rows_apart]
    - [adj_finger_diff_row, outward_roll, sum_engram_position_values]
    - [adj_finger_diff_row, outward_roll, sum_finger_values]
    - [adj_finger_diff_row, outward_roll, sum_row_position_values]
    - [adj_finger_diff_row, rows_apart, sum_finger_values]
    - [adj_finger_diff_row, sum_finger_values, sum_row_position_values]
    - [angle_apart, outward_roll, sum_engram_position_values]
    - [angle_apart, outward_roll, sum_finger_values]
    - [outward_roll, rows_apart, sum_engram_position_values]
    - [outward_roll, rows_apart, sum_finger_values]
    - [outward_roll, rows_apart, sum_row_position_values]
    - [outward_roll, sum_engram_position_values, sum_finger_values]
    - [outward_roll, sum_finger_values, sum_row_position_values]
    - [rows_apart, sum_finger_values, sum_row_position_values]
###
